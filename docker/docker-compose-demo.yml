version: "3"
services:
  proxy:
    depends_on:
      - backend
      - admin
      - imaginary
    image: traefik:v2.2
    ports:
      - "${PROXY_HTTP_PORT}:80"
      - "${PROXY_API_PORT}:8080"
    command:
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --accesslog
      - --log
      - --api
      - --api.insecure=true
    networks:
      - traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true

  imaginary:
    image: h2non/imaginary:latest
    # optionally mount a volume as local image source
    volumes:
      - ${VOLUME_PATH}/upload:/mnt/data
    environment:
      PORT: 9000
    command: -enable-placeholder -mount /mnt/data -path-prefix /imaginary
    ports:
      - "9000:9000"
    networks:
      - traefik
    labels:
      - traefik.enable=true
      - traefik.http.routers.imaginary.rule=PathPrefix(`/imaginary`)
      - traefik.http.services.imaginary.loadbalancer.server.port=9000

  backend:
    container_name: geopaysage_backend
    depends_on:
      db:
        condition: service_healthy
    networks:
      - traefik
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.backend
    volumes:
      - ../backend:/app
      - ${VOLUME_PATH}/upload:/upload
      - ${VOLUME_PATH}/custom:/app/static/custom
      - ${VOLUME_PATH}/i18n:/app/i18n
    ports:
      - "${HTTP_PORT}:80"
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=PathPrefix(`/`)
      - traefik.http.services.backend.loadbalancer.server.port=80
    env_file:
      - ./.env
    environment:
      - FLASK_APP=app.py
      - FLASK_DEBUG=1
      - "RUN=flask run --host=0.0.0.0 --port=80"
    #command: flask run --host=0.0.0.0 --port=80
    # Infinite loop, to keep it alive, for debugging
    command: bash -c "/app/prestart.sh && flask run --host=0.0.0.0 --port=80 && while true; do echo 'sleeping...' && sleep 10; done"

  admin:
    container_name: geopaysage_admin
    depends_on:
      - backend
    networks:
      - traefik
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.admin-demo
    labels:
      - traefik.enable=true
      - traefik.http.routers.admin.rule=PathPrefix(`/admin`)
      - traefik.http.services.admin.loadbalancer.server.port=80

  db:
    container_name: geopaysage_db
    build:
      context: ../
      dockerfile: ./docker/Dockerfile.db
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -h 127.0.0.1"]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 60s
    networks:
      - traefik
    volumes:
      - geopaysages-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_SERVER=db
      - POSTGRES_USER=${DB_USER}

volumes:
  geopaysages-db-data:

networks:
  traefik:
    external: true
